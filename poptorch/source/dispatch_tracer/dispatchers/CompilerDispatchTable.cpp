// Copyright (c) 2021 Graphcore Ltd. All rights reserved.
#include <torch/csrc/jit/ir/ir.h>

#include <vector>

#include "../../PoptorchSymbols.hpp"
#include "MlirDispatch.hpp"

/*
 * This file implements the hooks the compiler uses to interface with the
 * PopTorch compiler.
 *
 * The indended operational flow is as follows: Aten operation is encountered.
 *  If it is a directly support MLIR op:
 *    We unpack all the PyTorch arguments into MLIR arguments and call the
 *    autogenerated builder.
 *
 *    These are defined in OpSupport.yml
 *
 * COMMING IN ANOTHER PATCH. TODO(T49189)
 */

namespace poptorch {

/*
 * The first dispatch table. This is the one which maps from an aten operation
 * onto the above table.
 */
void MLIRDispatch::generateDispatchTable() {
  // The generated mapping of PyTorch/Aten -> MLIR functions.
  // Each of functions when passed the PyTorch function arguments will extract
  // and translate all tensors/scalars into an MLIR representation from the
  // given PyTorch and then call the correct MLIR builder function.

  // It is generated by the generate scripts in
  // `poptorch/source/dispatch_tracer/scripts` from OpSupport.yml.
  _direct_dispatch_lookup = {
#include "AtenToMlirDispatch.inc"
  };

  /*
   * The second dispatch table is used to dispatch from the current TracingV1
   * like PopART/JIT IR nodes we create. This is so we can still support the
   * normal handler path.
   */
  // ANOTHER PATCH. TODO(T49189)
}

} // namespace poptorch
