// Copyright (c) 2021 Graphcore Ltd. All rights reserved.
#include "CompilerImpl.hpp"
#include "pytorch_bridge/Compiler.hpp"

/*
 * We keep the op defs in here so the main file doesn't become too cluttered.
 */

namespace poptorch_ir {

namespace {
template <typename T> T convert(T a, std::vector<mlir::Value> & /*unused*/) {
  return a;
}

/* UNUSED IN THIS PATCH
llvm::SmallVector<mlir::Value, 4>
convert(const std::vector<poptorch_ir::TensorId> &inputs,
        std::vector<mlir::Value> &values) {
  llvm::SmallVector<mlir::Value, 4> tmp;
  for (TensorId id : inputs) {
    tmp.push_back(values[id]);
  }
  return std::move(tmp);
}*/

mlir::Value convert(poptorch_ir::TensorId input,
                    std::vector<mlir::Value> &values) {
  if (input == poptorch_ir::tensor_error_id) {
    return {};
  }

  return values[input];
}
} // namespace

/*
 * Generate a builder for each of the autogenerated functions.
 */

#include "dialect/AutogenCompiler.cpp"

} // namespace poptorch_ir
