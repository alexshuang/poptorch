// Copyright (c) 2021 Graphcore Ltd. All rights reserved.
#include "IMLIRCompiler.hpp"
#include "poptorch_logging/Logging.hpp"
#include "pytorch_bridge/PoptorchCompiler.hpp"

/*
 * We keep the op defs in here so the main file doesn't become too cluttered.
 */

namespace poptorch_ir {

namespace {
template <typename T> T convert(T a, detail::IMLIRCompiler & /*unused*/) {
  return a;
}

[[maybe_unused]] llvm::SmallVector<mlir::Value, 4>
convert(const std::vector<poptorch_ir::TensorId> &inputs,
        detail::IMLIRCompiler &compiler) {
  llvm::SmallVector<mlir::Value, 4> tmp;
  for (TensorId id : inputs) {
    tmp.push_back(compiler.findValue(id));
  }
  return tmp;
}

mlir::Value convert(poptorch_ir::TensorId input,
                    detail::IMLIRCompiler &compiler) {
  if (input == poptorch_ir::tensor_error_id || input == poptorch_ir::none_id) {
    return {};
  }

  return compiler.findValue(input);
}
} // namespace

/*
 * Generate a builder for each of the autogenerated functions.
 */

#include "dialect/AutogenCompiler.cpp.inc"

} // namespace poptorch_ir
